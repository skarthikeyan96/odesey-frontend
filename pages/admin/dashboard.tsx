import Head from "next/head";
import FormComponent from "../../components/RegisterForm";
import Navbar from "../../components/Navbar";
import axios from "axios";
import nookies from "nookies";
import useSWR, { useSWRConfig } from "swr";
import Link from "next/link";
import { CheckCircleIcon, TrashIcon } from "@heroicons/react/24/solid";
import moment from "moment";
import sanitizeHtml from "sanitize-html";
import ChopLines from "chop-lines";
import toast, { Toaster } from "react-hot-toast";

export { default as getServerSideProps } from "../../lib/ServerProps";

const fetcher = (url: RequestInfo | URL) =>
  fetch(url).then((res) => res.json());

export const Sanitized = ({ html }: any) => (
  <div
    dangerouslySetInnerHTML={{
      __html: sanitizeHtml(html, { allowedTags: ["p", "strong", "em", "a"] }),
    }}
  />
);

export default function Home(props: any) {
  const {
    user: { username },
    jwt,
  } = props;

  const { data, error } = useSWR("/api/journal", fetcher);

  const { mutate } = useSWRConfig();

  if (error) return <div>failed to load</div>;

  const handleDelete = async (journal_id: string, journal_title: string) => {
    try {
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_URL_PREFIX}/journal/?journal_id=${journal_id}`,
        {
          headers: {
            Accept: "application/json",
            Authorization: `Bearer ${jwt}`,
          },
          method: "DELETE",
        }
      );
      const data = response.json();

      toast.success(`Deleted Successfully ${journal_title}`, {
        icon: <CheckCircleIcon className="h-6 w-6 text-white" />,
      });

      mutate("/api/journal");
    } catch (e) {
      console.error(e);
    }
  };

  const renderJournals = () => {
    return (
      <div className="overflow-x-auto relative pt-8 pl-4 pr-4 ml-8 mr-8">
        <table className=" mx-auto w-full text-sm text-left text-gray-500 dark:text-gray-400">
          <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
            <tr>
              <th scope="col" className="py-3 px-6">
                Journal Name
              </th>
              <th scope="col" className="py-3 px-6">
                Journal Description
              </th>
              <th scope="col" className="py-3 px-6">
                Created At
              </th>
              <th scope="col" className="py-3 px-6">
                Actions
              </th>
            </tr>
          </thead>
          <tbody>
            {data.map((item: any, index: string) => {
              return (
                <tr className="bg-white border-b dark:bg-gray-800 dark:border-gray-700" key={index}>
                  <th
                    scope="row"
                    className="py-4 px-6 font-medium text-gray-900 whitespace-nowrap dark:text-white"
                  >
                    <Link href={`/admin/journal/${item.journal_id}`}>
                      {item.title}
                    </Link>
                  </th>
                  <td className="py-4 px-6">
                    <ChopLines lines={2} lineHeight={24}>
                      <Sanitized html={item.description} />
                    </ChopLines>
                  </td>
                  <td className="py-4 px-6">
                    {moment(new Date(item.created_at)).fromNow()}
                  </td>
                  <td className="py-4 px-6">
                    <TrashIcon
                      className="w-6 h-6 cursor-pointer"
                      onClick={() => handleDelete(item.journal_id, item.title)}
                    />
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    );
  };

  const renderNoJournalMessage = () => {
    return (
      <div className="flex space-x-4 mx-auto text-center items-center justify-center">
        <h2> No journals found </h2>
        <Link
          href="/admin/journal/new"
          className="font-medium text-blue-600 dark:text-blue-500 hover:underline"
        >
         
          Create journal
        </Link>
      </div>
    );
  };
  return (
    <>
      <Head>
        <title>Odesey Front End</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Navbar isAuthenticated={props.isAuthenticated} />
      {!data && (
        <div className="loading">
          <div className="loader"></div>
        </div>
      )}
      <div className="p-4 ml-4">
        {data && data.length !== 0 && renderJournals()}
      </div>

      {data && data.length === 0 && renderNoJournalMessage()}
      <Toaster
        toastOptions={{
          success: {
            style: {
              background: "green",
              color: "white",
            },
          },
          error: {
            style: {
              background: "red",
              color: "white",
            },
          },
        }}
      />
    </>
  );
}
